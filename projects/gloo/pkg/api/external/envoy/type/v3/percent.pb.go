// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/type/v3/percent.proto

package v3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/gloo-edge/projects/gloo/pkg/api/external/udpa/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Fraction percentages support several fixed denominator values.
type FractionalPercent_DenominatorType int32

const (
	// 100.
	//
	// **Example**: 1/100 = 1%.
	FractionalPercent_HUNDRED FractionalPercent_DenominatorType = 0
	// 10,000.
	//
	// **Example**: 1/10000 = 0.01%.
	FractionalPercent_TEN_THOUSAND FractionalPercent_DenominatorType = 1
	// 1,000,000.
	//
	// **Example**: 1/1000000 = 0.0001%.
	FractionalPercent_MILLION FractionalPercent_DenominatorType = 2
)

var FractionalPercent_DenominatorType_name = map[int32]string{
	0: "HUNDRED",
	1: "TEN_THOUSAND",
	2: "MILLION",
}

var FractionalPercent_DenominatorType_value = map[string]int32{
	"HUNDRED":      0,
	"TEN_THOUSAND": 1,
	"MILLION":      2,
}

func (x FractionalPercent_DenominatorType) String() string {
	return proto.EnumName(FractionalPercent_DenominatorType_name, int32(x))
}

func (FractionalPercent_DenominatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32545c5aeff30030, []int{1, 0}
}

// Identifies a percentage, in the range [0.0, 100.0].
type Percent struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Percent) Reset()         { *m = Percent{} }
func (m *Percent) String() string { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()    {}
func (*Percent) Descriptor() ([]byte, []int) {
	return fileDescriptor_32545c5aeff30030, []int{0}
}
func (m *Percent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Percent.Unmarshal(m, b)
}
func (m *Percent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Percent.Marshal(b, m, deterministic)
}
func (m *Percent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percent.Merge(m, src)
}
func (m *Percent) XXX_Size() int {
	return xxx_messageInfo_Percent.Size(m)
}
func (m *Percent) XXX_DiscardUnknown() {
	xxx_messageInfo_Percent.DiscardUnknown(m)
}

var xxx_messageInfo_Percent proto.InternalMessageInfo

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A fractional percentage is used in cases in which for performance reasons performing floating
// point to integer conversions during randomness calculations is undesirable. The message includes
// both a numerator and denominator that together determine the final fractional value.
//
// * **Example**: 1/100 = 1%.
// * **Example**: 3/10000 = 0.03%.
type FractionalPercent struct {
	// Specifies the numerator. Defaults to 0.
	Numerator uint32 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// Specifies the denominator. If the denominator specified is less than the numerator, the final
	// fractional percentage is capped at 1 (100%).
	Denominator          FractionalPercent_DenominatorType `protobuf:"varint,2,opt,name=denominator,proto3,enum=envoy.type.v3.FractionalPercent_DenominatorType" json:"denominator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *FractionalPercent) Reset()         { *m = FractionalPercent{} }
func (m *FractionalPercent) String() string { return proto.CompactTextString(m) }
func (*FractionalPercent) ProtoMessage()    {}
func (*FractionalPercent) Descriptor() ([]byte, []int) {
	return fileDescriptor_32545c5aeff30030, []int{1}
}
func (m *FractionalPercent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FractionalPercent.Unmarshal(m, b)
}
func (m *FractionalPercent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FractionalPercent.Marshal(b, m, deterministic)
}
func (m *FractionalPercent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FractionalPercent.Merge(m, src)
}
func (m *FractionalPercent) XXX_Size() int {
	return xxx_messageInfo_FractionalPercent.Size(m)
}
func (m *FractionalPercent) XXX_DiscardUnknown() {
	xxx_messageInfo_FractionalPercent.DiscardUnknown(m)
}

var xxx_messageInfo_FractionalPercent proto.InternalMessageInfo

func (m *FractionalPercent) GetNumerator() uint32 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *FractionalPercent) GetDenominator() FractionalPercent_DenominatorType {
	if m != nil {
		return m.Denominator
	}
	return FractionalPercent_HUNDRED
}

func init() {
	proto.RegisterEnum("envoy.type.v3.FractionalPercent_DenominatorType", FractionalPercent_DenominatorType_name, FractionalPercent_DenominatorType_value)
	proto.RegisterType((*Percent)(nil), "envoy.type.v3.Percent")
	proto.RegisterType((*FractionalPercent)(nil), "envoy.type.v3.FractionalPercent")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/type/v3/percent.proto", fileDescriptor_32545c5aeff30030)
}

var fileDescriptor_32545c5aeff30030 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x2c, 0xb4, 0xd5, 0x69, 0xab, 0xeb, 0x10, 0xa8, 0xad, 0x35, 0xd4, 0x78, 0xa9, 0x87,
	0xec, 0x88, 0xb9, 0x15, 0x04, 0x5d, 0xb6, 0xd2, 0x40, 0xdd, 0x86, 0x4d, 0x7a, 0x50, 0x04, 0x99,
	0xee, 0x0e, 0xeb, 0xe8, 0x66, 0xde, 0x30, 0x3b, 0xbb, 0x64, 0x6f, 0x22, 0x1e, 0xfc, 0x0c, 0x7e,
	0x02, 0x3f, 0x83, 0x77, 0xc1, 0xab, 0x5f, 0xc1, 0xaf, 0xe0, 0x2d, 0x27, 0xd9, 0x3f, 0x21, 0x89,
	0x01, 0xa1, 0xef, 0xf4, 0x78, 0xbf, 0xdf, 0xfb, 0xcd, 0xef, 0xcd, 0x7b, 0x78, 0x14, 0x0b, 0xf3,
	0x2e, 0xbb, 0x72, 0x42, 0x98, 0xd0, 0x14, 0x12, 0xe8, 0x09, 0xa0, 0x71, 0x02, 0xd0, 0xe3, 0x51,
	0xcc, 0xa9, 0xd2, 0xf0, 0x9e, 0x87, 0x26, 0xad, 0x4a, 0x94, 0x29, 0x41, 0xf9, 0xd4, 0x70, 0x2d,
	0x59, 0x42, 0xb9, 0xcc, 0xa1, 0xa0, 0xa6, 0x50, 0x9c, 0xe6, 0x7d, 0xaa, 0xb8, 0x0e, 0xb9, 0x34,
	0x8e, 0xd2, 0x60, 0x80, 0xec, 0x56, 0xa0, 0x53, 0x82, 0x4e, 0xde, 0x3f, 0xb8, 0x9f, 0x45, 0x8a,
	0x51, 0x26, 0x25, 0x18, 0x66, 0x04, 0xc8, 0x94, 0xa6, 0x86, 0x99, 0x2c, 0xad, 0xd9, 0x07, 0x0f,
	0xd6, 0xe0, 0x9c, 0xeb, 0x54, 0x80, 0x14, 0x32, 0x6e, 0x28, 0x7b, 0x39, 0x4b, 0x44, 0xc4, 0x0c,
	0xa7, 0xf3, 0xa4, 0x01, 0xda, 0x31, 0xc4, 0x50, 0xa5, 0xb4, 0xcc, 0xea, 0x6a, 0x77, 0x84, 0xb7,
	0x86, 0xb5, 0x21, 0xd2, 0xc3, 0x1b, 0x39, 0x4b, 0x32, 0x7e, 0x17, 0x1d, 0xa1, 0x63, 0xe4, 0xee,
	0xcd, 0xdc, 0x36, 0x21, 0xfb, 0xad, 0x2a, 0x5e, 0x3d, 0x7b, 0xd4, 0x6a, 0x22, 0xa8, 0x59, 0x27,
	0xfb, 0x5f, 0x7f, 0x7c, 0xe9, 0xb4, 0x31, 0x59, 0x1a, 0xa0, 0x51, 0xea, 0xfe, 0x41, 0xf8, 0xce,
	0x0b, 0xcd, 0xc2, 0xd2, 0x22, 0x4b, 0xe6, 0xfa, 0x87, 0xf8, 0xa6, 0xcc, 0x26, 0x5c, 0x33, 0x03,
	0xba, 0x7a, 0x63, 0x37, 0x58, 0x14, 0xc8, 0x1b, 0xbc, 0x1d, 0x71, 0x09, 0x13, 0x21, 0x2b, 0xdc,
	0x3a, 0x42, 0xc7, 0xb7, 0x9e, 0x3c, 0x76, 0x56, 0xbe, 0xc7, 0x59, 0x13, 0x75, 0xbc, 0x45, 0xcf,
	0xb8, 0x50, 0xdc, 0xbd, 0x31, 0x73, 0x37, 0x3e, 0x21, 0xcb, 0x46, 0xc1, 0xb2, 0x5c, 0xf7, 0x29,
	0xbe, 0xfd, 0x0f, 0x93, 0x6c, 0xe3, 0xad, 0xb3, 0x4b, 0xdf, 0x0b, 0x4e, 0x3d, 0xbb, 0x45, 0x6c,
	0xbc, 0x33, 0x3e, 0xf5, 0xdf, 0x8e, 0xcf, 0x2e, 0x2e, 0x47, 0xcf, 0x7d, 0xcf, 0x46, 0x25, 0xfc,
	0x72, 0x70, 0x7e, 0x3e, 0xb8, 0xf0, 0x6d, 0xeb, 0xe4, 0x61, 0x39, 0x6b, 0x07, 0x1f, 0x2e, 0xb9,
	0x59, 0xb3, 0xe2, 0x7e, 0x46, 0xdf, 0x7e, 0x77, 0xd0, 0xf7, 0x8f, 0x3f, 0x7f, 0x6d, 0x5a, 0xb6,
	0x85, 0xef, 0x09, 0xa8, 0xdd, 0x2b, 0x0d, 0xd3, 0x62, 0x75, 0x10, 0x77, 0xa7, 0x69, 0x1a, 0x96,
	0x4b, 0x18, 0xa2, 0xd7, 0x83, 0x6b, 0xdc, 0x96, 0xfa, 0x10, 0xff, 0xe7, 0xbe, 0xae, 0x36, 0xab,
	0xc5, 0xf6, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xba, 0x26, 0xae, 0x4c, 0xaf, 0x02, 0x00, 0x00,
}

func (this *Percent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Percent)
	if !ok {
		that2, ok := that.(Percent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FractionalPercent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FractionalPercent)
	if !ok {
		that2, ok := that.(FractionalPercent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Numerator != that1.Numerator {
		return false
	}
	if this.Denominator != that1.Denominator {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
