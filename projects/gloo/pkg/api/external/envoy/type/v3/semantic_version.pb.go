// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/type/v3/semantic_version.proto

package v3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/gloo-edge/projects/gloo/pkg/api/external/udpa/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Envoy uses SemVer (https://semver.org/). Major/minor versions indicate
// expected behaviors and APIs, the patch version field is used only
// for security fixes and can be generally ignored.
type SemanticVersion struct {
	MajorNumber          uint32   `protobuf:"varint,1,opt,name=major_number,json=majorNumber,proto3" json:"major_number,omitempty"`
	MinorNumber          uint32   `protobuf:"varint,2,opt,name=minor_number,json=minorNumber,proto3" json:"minor_number,omitempty"`
	Patch                uint32   `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SemanticVersion) Reset()         { *m = SemanticVersion{} }
func (m *SemanticVersion) String() string { return proto.CompactTextString(m) }
func (*SemanticVersion) ProtoMessage()    {}
func (*SemanticVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc2290ef13a7cf4b, []int{0}
}
func (m *SemanticVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SemanticVersion.Unmarshal(m, b)
}
func (m *SemanticVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SemanticVersion.Marshal(b, m, deterministic)
}
func (m *SemanticVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemanticVersion.Merge(m, src)
}
func (m *SemanticVersion) XXX_Size() int {
	return xxx_messageInfo_SemanticVersion.Size(m)
}
func (m *SemanticVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_SemanticVersion.DiscardUnknown(m)
}

var xxx_messageInfo_SemanticVersion proto.InternalMessageInfo

func (m *SemanticVersion) GetMajorNumber() uint32 {
	if m != nil {
		return m.MajorNumber
	}
	return 0
}

func (m *SemanticVersion) GetMinorNumber() uint32 {
	if m != nil {
		return m.MinorNumber
	}
	return 0
}

func (m *SemanticVersion) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func init() {
	proto.RegisterType((*SemanticVersion)(nil), "envoy.type.v3.SemanticVersion")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/type/v3/semantic_version.proto", fileDescriptor_fc2290ef13a7cf4b)
}

var fileDescriptor_fc2290ef13a7cf4b = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0x80, 0xe5, 0xfe, 0xfa, 0x3b, 0x18, 0x2a, 0x50, 0xd5, 0xa1, 0x2a, 0x50, 0x11, 0x26, 0x96,
	0xfa, 0x86, 0x6c, 0x8c, 0xdd, 0x58, 0x50, 0x05, 0x12, 0x03, 0x42, 0xaa, 0x9c, 0xd4, 0x72, 0x5d,
	0x12, 0x9f, 0x65, 0x3b, 0x51, 0xb3, 0x31, 0x32, 0x30, 0x30, 0xf3, 0x04, 0x3c, 0x03, 0x3b, 0x12,
	0x2b, 0xaf, 0xc0, 0x93, 0xa0, 0x38, 0x91, 0x80, 0x22, 0x21, 0xb1, 0x9d, 0xbf, 0xfb, 0xce, 0xf6,
	0xdd, 0xd1, 0x6b, 0xa9, 0xfc, 0xb2, 0x48, 0x58, 0x8a, 0x39, 0x38, 0xcc, 0x70, 0xa2, 0x10, 0x64,
	0x86, 0x38, 0x11, 0x0b, 0x29, 0xc0, 0x58, 0x5c, 0x89, 0xd4, 0xbb, 0x80, 0x80, 0x1b, 0x05, 0x62,
	0xed, 0x85, 0xd5, 0x3c, 0x03, 0xa1, 0x4b, 0xac, 0xc0, 0x57, 0x46, 0x40, 0x19, 0x83, 0x13, 0x39,
	0xd7, 0x5e, 0xa5, 0xf3, 0x52, 0x58, 0xa7, 0x50, 0x33, 0x63, 0xd1, 0x63, 0xbf, 0x17, 0x2c, 0x56,
	0x5b, 0xac, 0x8c, 0x47, 0x07, 0xc5, 0xc2, 0x70, 0xe0, 0x5a, 0xa3, 0xe7, 0x5e, 0xa1, 0x76, 0xe0,
	0x3c, 0xf7, 0x85, 0x6b, 0xec, 0x51, 0xf4, 0x23, 0xdd, 0xde, 0xa6, 0xb4, 0x6c, 0x95, 0x81, 0x44,
	0x89, 0x21, 0x84, 0x3a, 0x6a, 0xe8, 0xd1, 0x03, 0xa1, 0x3b, 0x17, 0xed, 0x0f, 0x2e, 0x9b, 0x92,
	0x7e, 0x44, 0xb7, 0x73, 0xbe, 0x42, 0x3b, 0xd7, 0x45, 0x9e, 0x08, 0x3b, 0x24, 0x87, 0xe4, 0xb8,
	0x77, 0xbe, 0x15, 0xd8, 0x59, 0x40, 0x41, 0x51, 0xfa, 0x53, 0xe9, 0xb4, 0x4a, 0xcd, 0x5a, 0x65,
	0x40, 0xff, 0x1b, 0xee, 0xd3, 0xe5, 0xf0, 0x5f, 0xc8, 0x35, 0x87, 0x93, 0xe8, 0xf1, 0xe5, 0x6e,
	0xbc, 0x4f, 0x47, 0x5f, 0xba, 0xdb, 0x78, 0x7e, 0x7a, 0x4f, 0x9e, 0xde, 0xc7, 0xe4, 0xf9, 0xf6,
	0xf5, 0xad, 0xdb, 0xd9, 0xed, 0xd0, 0x3d, 0x85, 0x2c, 0xd8, 0xc6, 0xe2, 0xba, 0x62, 0xdf, 0xc6,
	0x32, 0x1d, 0x6c, 0x14, 0xcf, 0xea, 0xa6, 0x66, 0xe4, 0xea, 0xf4, 0x0f, 0xbb, 0x31, 0x37, 0xf2,
	0x97, 0xfd, 0x24, 0xdd, 0x30, 0xa8, 0xf8, 0x23, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x0c, 0xc6, 0xb7,
	0xef, 0x01, 0x00, 0x00,
}

func (this *SemanticVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SemanticVersion)
	if !ok {
		that2, ok := that.(SemanticVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MajorNumber != that1.MajorNumber {
		return false
	}
	if this.MinorNumber != that1.MinorNumber {
		return false
	}
	if this.Patch != that1.Patch {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
