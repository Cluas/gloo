// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/config/core/v3/backoff.proto

package v3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/gloo-edge/projects/gloo/pkg/api/external/udpa/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Configuration defining a jittered exponential back off strategy.
type BackoffStrategy struct {
	// The base interval to be used for the next back off computation. It should
	// be greater than zero and less than or equal to :ref:`max_interval
	// <envoy_api_field_config.core.v3.BackoffStrategy.max_interval>`.
	BaseInterval *types.Duration `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	// Specifies the maximum interval between retries. This parameter is optional,
	// but must be greater than or equal to the :ref:`base_interval
	// <envoy_api_field_config.core.v3.BackoffStrategy.base_interval>` if set. The default
	// is 10 times the :ref:`base_interval
	// <envoy_api_field_config.core.v3.BackoffStrategy.base_interval>`.
	MaxInterval          *types.Duration `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BackoffStrategy) Reset()         { *m = BackoffStrategy{} }
func (m *BackoffStrategy) String() string { return proto.CompactTextString(m) }
func (*BackoffStrategy) ProtoMessage()    {}
func (*BackoffStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe132e2d34d39081, []int{0}
}
func (m *BackoffStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackoffStrategy.Unmarshal(m, b)
}
func (m *BackoffStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackoffStrategy.Marshal(b, m, deterministic)
}
func (m *BackoffStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackoffStrategy.Merge(m, src)
}
func (m *BackoffStrategy) XXX_Size() int {
	return xxx_messageInfo_BackoffStrategy.Size(m)
}
func (m *BackoffStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_BackoffStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_BackoffStrategy proto.InternalMessageInfo

func (m *BackoffStrategy) GetBaseInterval() *types.Duration {
	if m != nil {
		return m.BaseInterval
	}
	return nil
}

func (m *BackoffStrategy) GetMaxInterval() *types.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func init() {
	proto.RegisterType((*BackoffStrategy)(nil), "envoy.config.core.v3.BackoffStrategy")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-edge/projects/gloo/api/external/envoy/config/core/v3/backoff.proto", fileDescriptor_fe132e2d34d39081)
}

var fileDescriptor_fe132e2d34d39081 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbf, 0x4a, 0xc3, 0x40,
	0x18, 0xf7, 0x82, 0x96, 0x92, 0x56, 0x2d, 0xa5, 0xa0, 0x16, 0x2c, 0xb6, 0x2e, 0x45, 0xe8, 0x1d,
	0xb4, 0x9b, 0xe0, 0x12, 0x44, 0x70, 0x91, 0x52, 0xb7, 0x2e, 0x72, 0x49, 0x2e, 0xe7, 0xd9, 0xf4,
	0xbe, 0x70, 0xb9, 0x84, 0x74, 0x73, 0x70, 0x70, 0x76, 0xf4, 0x09, 0xa4, 0x8f, 0xe0, 0xe4, 0x22,
	0xb8, 0x8a, 0x6f, 0xe0, 0x63, 0x74, 0x92, 0xfc, 0x29, 0x82, 0x0a, 0xc5, 0xed, 0xe3, 0xf7, 0x8f,
	0xdf, 0x7d, 0xf7, 0x99, 0x63, 0x2e, 0xf4, 0x75, 0x64, 0x63, 0x07, 0xa6, 0x24, 0x04, 0x1f, 0x7a,
	0x02, 0x08, 0xf7, 0x01, 0x7a, 0xcc, 0xe5, 0x8c, 0x04, 0x0a, 0x6e, 0x98, 0xa3, 0xc3, 0x0c, 0x22,
	0x34, 0x10, 0x84, 0x25, 0x9a, 0x29, 0x49, 0x7d, 0xc2, 0x64, 0x0c, 0x33, 0xe2, 0x80, 0xf4, 0x04,
	0x27, 0x0e, 0x28, 0x46, 0xe2, 0x01, 0xb1, 0xa9, 0x33, 0x01, 0xcf, 0xc3, 0x81, 0x02, 0x0d, 0xf5,
	0x46, 0xa6, 0xc1, 0xb9, 0x06, 0xa7, 0x1a, 0x1c, 0x0f, 0x9a, 0x2d, 0x0e, 0xc0, 0xfd, 0x2c, 0x5b,
	0x83, 0x1d, 0x79, 0xc4, 0x8d, 0x14, 0xd5, 0x02, 0x64, 0xee, 0x6a, 0xee, 0x47, 0x6e, 0x40, 0x09,
	0x95, 0x12, 0x74, 0x06, 0x87, 0x24, 0xd4, 0x54, 0x47, 0x61, 0x41, 0xb7, 0x7f, 0xd1, 0x31, 0x53,
	0xa1, 0x00, 0x29, 0x24, 0x2f, 0x24, 0x3b, 0x31, 0xf5, 0x85, 0x4b, 0x35, 0x23, 0xcb, 0xa1, 0x20,
	0x1a, 0x1c, 0x38, 0x64, 0x23, 0x49, 0xa7, 0x1c, 0xed, 0x7c, 0x20, 0x73, 0xdb, 0xca, 0x8b, 0x5f,
	0x6a, 0x45, 0x35, 0xe3, 0xb3, 0xfa, 0x85, 0xb9, 0x69, 0xd3, 0x90, 0x5d, 0x09, 0xa9, 0x99, 0x8a,
	0xa9, 0xbf, 0x8b, 0x0e, 0x50, 0xb7, 0xd2, 0xdf, 0xc3, 0x79, 0x79, 0xbc, 0x2c, 0x8f, 0x4f, 0x8b,
	0xf2, 0xd6, 0xd6, 0xc2, 0xaa, 0xcc, 0x51, 0xb9, 0x8c, 0xfa, 0xeb, 0xb5, 0x97, 0xbb, 0x93, 0x51,
	0x35, 0xf5, 0x9f, 0x17, 0xf6, 0xfa, 0x99, 0x59, 0x9d, 0xd2, 0xe4, 0x3b, 0xce, 0x58, 0x15, 0x57,
	0x5e, 0x58, 0x1b, 0x73, 0x64, 0x1c, 0xad, 0x8d, 0x2a, 0x53, 0x9a, 0x2c, 0x73, 0x8e, 0xbb, 0x8f,
	0xaf, 0xf7, 0xad, 0x43, 0xb3, 0x9d, 0x6f, 0x96, 0x06, 0x02, 0xc7, 0xfd, 0x7c, 0xb3, 0x3f, 0x5e,
	0x60, 0x3d, 0xa0, 0xa7, 0xcf, 0x16, 0x7a, 0xbe, 0x7d, 0x7b, 0x2f, 0x19, 0x35, 0xc3, 0xec, 0x08,
	0xc0, 0x99, 0x29, 0x50, 0x90, 0xcc, 0xf0, 0x5f, 0x3f, 0x63, 0x55, 0x8b, 0x8c, 0x61, 0xda, 0x66,
	0x88, 0xc6, 0xc3, 0x7f, 0xdc, 0x46, 0x30, 0xe1, 0xab, 0xef, 0xc3, 0x2e, 0x65, 0x0f, 0x1d, 0x7c,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xd9, 0x8a, 0xd1, 0x76, 0x02, 0x00, 0x00,
}

func (this *BackoffStrategy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackoffStrategy)
	if !ok {
		that2, ok := that.(BackoffStrategy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseInterval.Equal(that1.BaseInterval) {
		return false
	}
	if !this.MaxInterval.Equal(that1.MaxInterval) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
