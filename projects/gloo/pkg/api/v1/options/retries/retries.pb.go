// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-edge/projects/gloo/api/v1/options/retries/retries.proto

package retries

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Retry Policy applied at the Route and/or Virtual Hosts levels.
type RetryPolicy struct {
	// Specifies the conditions under which retry takes place. These are the same
	// conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
	RetryOn string `protobuf:"bytes,1,opt,name=retry_on,json=retryOn,proto3" json:"retry_on,omitempty"`
	// Specifies the allowed number of retries. This parameter is optional and
	// defaults to 1. These are the same conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
	NumRetries uint32 `protobuf:"varint,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// Specifies a non-zero upstream timeout per retry attempt. This parameter is optional.
	PerTryTimeout        *time.Duration `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout,proto3,stdduration" json:"per_try_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RetryPolicy) Reset()         { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()    {}
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_827b9907984e2a0b, []int{0}
}
func (m *RetryPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryPolicy.Unmarshal(m, b)
}
func (m *RetryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryPolicy.Marshal(b, m, deterministic)
}
func (m *RetryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryPolicy.Merge(m, src)
}
func (m *RetryPolicy) XXX_Size() int {
	return xxx_messageInfo_RetryPolicy.Size(m)
}
func (m *RetryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryPolicy proto.InternalMessageInfo

func (m *RetryPolicy) GetRetryOn() string {
	if m != nil {
		return m.RetryOn
	}
	return ""
}

func (m *RetryPolicy) GetNumRetries() uint32 {
	if m != nil {
		return m.NumRetries
	}
	return 0
}

func (m *RetryPolicy) GetPerTryTimeout() *time.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

func init() {
	proto.RegisterType((*RetryPolicy)(nil), "retries.options.gloo.solo.io.RetryPolicy")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-edge/projects/gloo/api/v1/options/retries/retries.proto", fileDescriptor_827b9907984e2a0b)
}

var fileDescriptor_827b9907984e2a0b = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x59, 0x2d, 0xfe, 0xd9, 0x50, 0x84, 0xe0, 0x21, 0x2d, 0xd2, 0x06, 0x4f, 0xb9, 0x74,
	0x17, 0xf5, 0x0d, 0x8a, 0xe2, 0x31, 0x12, 0x7a, 0xf2, 0x12, 0x9a, 0x74, 0x5d, 0x57, 0x93, 0xcc,
	0xb2, 0x99, 0x95, 0xe6, 0x35, 0x3c, 0xf9, 0x08, 0x3e, 0x82, 0x6f, 0x23, 0xf8, 0x0e, 0xde, 0x65,
	0xb3, 0xa9, 0x37, 0x0f, 0x9e, 0x66, 0xe6, 0xc7, 0x7c, 0x33, 0x1f, 0x1f, 0x4d, 0xa5, 0xc2, 0x47,
	0x5b, 0xb0, 0x12, 0x6a, 0xde, 0x42, 0x05, 0x0b, 0x05, 0x5c, 0x56, 0x00, 0x0b, 0xb1, 0x91, 0x82,
	0x6b, 0x03, 0x4f, 0xa2, 0xc4, 0xb6, 0x47, 0x7c, 0xad, 0x15, 0x7f, 0xb9, 0xe0, 0xa0, 0x51, 0x41,
	0xd3, 0x72, 0x23, 0xd0, 0x28, 0xf1, 0x5b, 0x99, 0x36, 0x80, 0x10, 0x9e, 0xed, 0xc6, 0x61, 0x8d,
	0x39, 0x29, 0x73, 0xa7, 0x99, 0x82, 0xe9, 0x4c, 0x02, 0xc8, 0xaa, 0x3f, 0x8c, 0x50, 0xd8, 0x07,
	0xbe, 0xb1, 0x66, 0xed, 0xf6, 0xbc, 0x7a, 0x7a, 0x2a, 0x41, 0x42, 0xdf, 0x72, 0xd7, 0x0d, 0x34,
	0x14, 0x5b, 0xf4, 0x50, 0x6c, 0xd1, 0xb3, 0xf3, 0x57, 0x42, 0x83, 0x4c, 0xa0, 0xe9, 0xee, 0xa0,
	0x52, 0x65, 0x17, 0x4e, 0xe8, 0x91, 0xfb, 0xdc, 0xe5, 0xd0, 0x44, 0x24, 0x26, 0xc9, 0x71, 0x76,
	0xd8, 0xcf, 0x69, 0x13, 0xce, 0x69, 0xd0, 0xd8, 0x3a, 0x1f, 0x8c, 0x45, 0x7b, 0x31, 0x49, 0xc6,
	0x19, 0x6d, 0x6c, 0x9d, 0x79, 0x12, 0xde, 0xd2, 0x13, 0x2d, 0x4c, 0xee, 0xd4, 0xa8, 0x6a, 0x01,
	0x16, 0xa3, 0xfd, 0x98, 0x24, 0xc1, 0xe5, 0x84, 0x79, 0xbf, 0x6c, 0xe7, 0x97, 0x5d, 0x0f, 0x7e,
	0x97, 0xa3, 0xb7, 0xcf, 0x39, 0xc9, 0xc6, 0x5a, 0x98, 0x95, 0xe9, 0x56, 0x5e, 0xb5, 0x4c, 0x3f,
	0xbe, 0x47, 0xe4, 0xfd, 0x6b, 0x46, 0xee, 0x6f, 0xfe, 0x91, 0xab, 0x7e, 0x96, 0x7f, 0x64, 0x5b,
	0x1c, 0xf4, 0x8f, 0xaf, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x09, 0x0b, 0x76, 0xaf, 0xa7, 0x01,
	0x00, 0x00,
}

func (this *RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryPolicy)
	if !ok {
		that2, ok := that.(RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RetryOn != that1.RetryOn {
		return false
	}
	if this.NumRetries != that1.NumRetries {
		return false
	}
	if this.PerTryTimeout != nil && that1.PerTryTimeout != nil {
		if *this.PerTryTimeout != *that1.PerTryTimeout {
			return false
		}
	} else if this.PerTryTimeout != nil {
		return false
	} else if that1.PerTryTimeout != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
