// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo-edge/projects/gloo/api/v1/connection.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action to take when Envoy receives client request with header names containing underscore
// characters.
// Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
// as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
// characters.
type ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction int32

const (
	// Allow headers with underscores. This is the default behavior.
	ConnectionConfig_HttpProtocolOptions_ALLOW ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction = 0
	// Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
	// end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
	// is incremented for each rejected request.
	ConnectionConfig_HttpProtocolOptions_REJECT_REQUEST ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction = 1
	// Drop the header with name containing underscores. The header is dropped before the filter chain is
	// invoked and as such filters will not see dropped headers. The
	// "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
	ConnectionConfig_HttpProtocolOptions_DROP_HEADER ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction = 2
)

var ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction_name = map[int32]string{
	0: "ALLOW",
	1: "REJECT_REQUEST",
	2: "DROP_HEADER",
}

var ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction_value = map[string]int32{
	"ALLOW":          0,
	"REJECT_REQUEST": 1,
	"DROP_HEADER":    2,
}

func (x ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction) String() string {
	return proto.EnumName(ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction_name, int32(x))
}

func (ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97a2c73df4060cbd, []int{0, 1, 0}
}

// Fine tune the settings for connections to an upstream
type ConnectionConfig struct {
	// Maximum requests for a single upstream connection (unspecified or zero = no limit)
	MaxRequestsPerConnection uint32 `protobuf:"varint,1,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// The timeout for new network connections to hosts in the cluster
	ConnectTimeout *time.Duration `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout,proto3,stdduration" json:"connect_timeout,omitempty"`
	// Configure OS-level tcp keepalive checks
	TcpKeepalive *ConnectionConfig_TcpKeepAlive `protobuf:"bytes,3,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	// Soft limit on size of the clusterâ€™s connections read and write buffers. If unspecified, an implementation defined default is applied (1MiB).
	// For more info, see the [envoy docs](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v2/api/v2/cluster.proto#cluster)
	PerConnectionBufferLimitBytes *types.UInt32Value `protobuf:"bytes,4,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	// Additional options when handling HTTP requests upstream. These options will be applicable to
	// both HTTP1 and HTTP2 requests.
	CommonHttpProtocolOptions *ConnectionConfig_HttpProtocolOptions `protobuf:"bytes,5,opt,name=common_http_protocol_options,json=commonHttpProtocolOptions,proto3" json:"common_http_protocol_options,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                              `json:"-"`
	XXX_unrecognized          []byte                                `json:"-"`
	XXX_sizecache             int32                                 `json:"-"`
}

func (m *ConnectionConfig) Reset()         { *m = ConnectionConfig{} }
func (m *ConnectionConfig) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfig) ProtoMessage()    {}
func (*ConnectionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a2c73df4060cbd, []int{0}
}
func (m *ConnectionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionConfig.Unmarshal(m, b)
}
func (m *ConnectionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionConfig.Marshal(b, m, deterministic)
}
func (m *ConnectionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfig.Merge(m, src)
}
func (m *ConnectionConfig) XXX_Size() int {
	return xxx_messageInfo_ConnectionConfig.Size(m)
}
func (m *ConnectionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfig proto.InternalMessageInfo

func (m *ConnectionConfig) GetMaxRequestsPerConnection() uint32 {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return 0
}

func (m *ConnectionConfig) GetConnectTimeout() *time.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *ConnectionConfig) GetTcpKeepalive() *ConnectionConfig_TcpKeepAlive {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func (m *ConnectionConfig) GetPerConnectionBufferLimitBytes() *types.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

func (m *ConnectionConfig) GetCommonHttpProtocolOptions() *ConnectionConfig_HttpProtocolOptions {
	if m != nil {
		return m.CommonHttpProtocolOptions
	}
	return nil
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
// see more info here: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/address.proto#envoy-api-msg-core-tcpkeepalive
type ConnectionConfig_TcpKeepAlive struct {
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	KeepaliveProbes uint32 `protobuf:"varint,1,opt,name=keepalive_probes,json=keepaliveProbes,proto3" json:"keepalive_probes,omitempty"`
	// The number of seconds a connection needs to be idle before keep-alive probes start being sent. This is rounded up to the second.
	KeepaliveTime *time.Duration `protobuf:"bytes,2,opt,name=keepalive_time,json=keepaliveTime,proto3,stdduration" json:"keepalive_time,omitempty"`
	// The number of seconds between keep-alive probes. This is rounded up to the second.
	KeepaliveInterval    *time.Duration `protobuf:"bytes,3,opt,name=keepalive_interval,json=keepaliveInterval,proto3,stdduration" json:"keepalive_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConnectionConfig_TcpKeepAlive) Reset()         { *m = ConnectionConfig_TcpKeepAlive{} }
func (m *ConnectionConfig_TcpKeepAlive) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfig_TcpKeepAlive) ProtoMessage()    {}
func (*ConnectionConfig_TcpKeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a2c73df4060cbd, []int{0, 0}
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Unmarshal(m, b)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Marshal(b, m, deterministic)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Merge(m, src)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Size() int {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Size(m)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfig_TcpKeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfig_TcpKeepAlive proto.InternalMessageInfo

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveProbes() uint32 {
	if m != nil {
		return m.KeepaliveProbes
	}
	return 0
}

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveTime() *time.Duration {
	if m != nil {
		return m.KeepaliveTime
	}
	return nil
}

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveInterval() *time.Duration {
	if m != nil {
		return m.KeepaliveInterval
	}
	return nil
}

type ConnectionConfig_HttpProtocolOptions struct {
	// The idle timeout for connections. The idle timeout is defined as the
	// period in which there are no active requests. When the
	// idle timeout is reached the connection will be closed. If the connection is an HTTP/2
	// downstream connection a drain sequence will occur prior to closing the connection, see
	// :ref:`drain_timeout
	// <envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
	// Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
	//
	// .. warning::
	//   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
	//   FIN packets, etc.
	IdleTimeout *time.Duration `protobuf:"bytes,1,opt,name=idle_timeout,json=idleTimeout,proto3,stdduration" json:"idle_timeout,omitempty"`
	// The maximum number of headers. If unconfigured, the default
	// maximum number of request headers allowed is 100. Requests that exceed this limit will receive
	// a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
	MaxHeadersCount uint32 `protobuf:"varint,2,opt,name=max_headers_count,json=maxHeadersCount,proto3" json:"max_headers_count,omitempty"`
	// Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
	// reset independent of any other timeouts. If not specified, this value is not set.
	MaxStreamDuration *time.Duration `protobuf:"bytes,3,opt,name=max_stream_duration,json=maxStreamDuration,proto3,stdduration" json:"max_stream_duration,omitempty"`
	// Action to take when a client request with a header name containing underscore characters is received.
	// If this setting is not specified, the value defaults to ALLOW.
	// Note: upstream responses are not affected by this setting.
	HeadersWithUnderscoresAction ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction `protobuf:"varint,4,opt,name=headers_with_underscores_action,json=headersWithUnderscoresAction,proto3,enum=gloo.solo.io.ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction" json:"headers_with_underscores_action,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                                          `json:"-"`
	XXX_unrecognized             []byte                                                            `json:"-"`
	XXX_sizecache                int32                                                             `json:"-"`
}

func (m *ConnectionConfig_HttpProtocolOptions) Reset()         { *m = ConnectionConfig_HttpProtocolOptions{} }
func (m *ConnectionConfig_HttpProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfig_HttpProtocolOptions) ProtoMessage()    {}
func (*ConnectionConfig_HttpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a2c73df4060cbd, []int{0, 1}
}
func (m *ConnectionConfig_HttpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionConfig_HttpProtocolOptions.Unmarshal(m, b)
}
func (m *ConnectionConfig_HttpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionConfig_HttpProtocolOptions.Marshal(b, m, deterministic)
}
func (m *ConnectionConfig_HttpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfig_HttpProtocolOptions.Merge(m, src)
}
func (m *ConnectionConfig_HttpProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_ConnectionConfig_HttpProtocolOptions.Size(m)
}
func (m *ConnectionConfig_HttpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfig_HttpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfig_HttpProtocolOptions proto.InternalMessageInfo

func (m *ConnectionConfig_HttpProtocolOptions) GetIdleTimeout() *time.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *ConnectionConfig_HttpProtocolOptions) GetMaxHeadersCount() uint32 {
	if m != nil {
		return m.MaxHeadersCount
	}
	return 0
}

func (m *ConnectionConfig_HttpProtocolOptions) GetMaxStreamDuration() *time.Duration {
	if m != nil {
		return m.MaxStreamDuration
	}
	return nil
}

func (m *ConnectionConfig_HttpProtocolOptions) GetHeadersWithUnderscoresAction() ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction {
	if m != nil {
		return m.HeadersWithUnderscoresAction
	}
	return ConnectionConfig_HttpProtocolOptions_ALLOW
}

func init() {
	proto.RegisterEnum("gloo.solo.io.ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction", ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction_name, ConnectionConfig_HttpProtocolOptions_HeadersWithUnderscoresAction_value)
	proto.RegisterType((*ConnectionConfig)(nil), "gloo.solo.io.ConnectionConfig")
	proto.RegisterType((*ConnectionConfig_TcpKeepAlive)(nil), "gloo.solo.io.ConnectionConfig.TcpKeepAlive")
	proto.RegisterType((*ConnectionConfig_HttpProtocolOptions)(nil), "gloo.solo.io.ConnectionConfig.HttpProtocolOptions")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo-edge/projects/gloo/api/v1/connection.proto", fileDescriptor_97a2c73df4060cbd)
}

var fileDescriptor_97a2c73df4060cbd = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xdc, 0x9f, 0x4f, 0x30, 0xcd, 0x5f, 0xa7, 0x2c, 0xd2, 0x10, 0xda, 0xd2, 0x55, 0x01,
	0xd5, 0x16, 0xa9, 0x58, 0x22, 0x94, 0xa4, 0x41, 0x29, 0x54, 0x4d, 0x70, 0x53, 0x2a, 0xb1, 0x19,
	0x4d, 0x9c, 0x1b, 0x67, 0xa8, 0xed, 0x19, 0xc6, 0xe3, 0x36, 0xbc, 0x08, 0xe2, 0x11, 0x78, 0x04,
	0x76, 0x3c, 0x03, 0x4f, 0x00, 0xe2, 0x1d, 0xd8, 0xa3, 0x19, 0x3b, 0x49, 0xa1, 0x55, 0x7f, 0x76,
	0xf6, 0xbd, 0xf7, 0x9c, 0x7b, 0xce, 0xdc, 0x3b, 0x83, 0x1a, 0x3e, 0x53, 0xa3, 0xa4, 0x6f, 0x7b,
	0x3c, 0x74, 0x62, 0x1e, 0xf0, 0x6d, 0xc6, 0x1d, 0x3f, 0xe0, 0x7c, 0x1b, 0x06, 0x3e, 0x38, 0x42,
	0xf2, 0xf7, 0xe0, 0xa9, 0xd8, 0x84, 0x1c, 0x2a, 0x98, 0x73, 0xfa, 0xd4, 0xf1, 0x78, 0x14, 0x81,
	0xa7, 0x18, 0x8f, 0x6c, 0x21, 0xb9, 0xe2, 0x38, 0xa7, 0xb3, 0xb6, 0x46, 0xdb, 0x8c, 0x57, 0xee,
	0xf9, 0xdc, 0xe7, 0x26, 0xe1, 0xe8, 0xaf, 0xb4, 0xa6, 0xb2, 0xe6, 0x73, 0xee, 0x07, 0x86, 0x51,
	0xf1, 0x7e, 0x32, 0x74, 0x06, 0x89, 0xa4, 0x33, 0x8e, 0x8b, 0xf9, 0x33, 0x49, 0x85, 0x00, 0x19,
	0x67, 0x79, 0x0c, 0x63, 0x95, 0x92, 0xc2, 0x58, 0xa5, 0xb1, 0xcd, 0x9f, 0x77, 0x50, 0xa9, 0x39,
	0x15, 0xd3, 0xe4, 0xd1, 0x90, 0xf9, 0xf8, 0x39, 0xba, 0x1f, 0xd2, 0x31, 0x91, 0xf0, 0x21, 0x81,
	0x58, 0xc5, 0x44, 0x80, 0x24, 0x33, 0xc5, 0x65, 0x6b, 0xc3, 0xda, 0xca, 0xbb, 0xe5, 0x90, 0x8e,
	0xdd, 0xac, 0xa2, 0x0b, 0x72, 0x46, 0x82, 0xdb, 0xa8, 0x98, 0x55, 0x13, 0xc5, 0x42, 0xe0, 0x89,
	0x2a, 0xcf, 0x6d, 0x58, 0x5b, 0x4b, 0xb5, 0x55, 0x3b, 0x55, 0x68, 0x4f, 0x14, 0xda, 0xbb, 0x99,
	0x83, 0xc6, 0xc2, 0xe7, 0x1f, 0xeb, 0x96, 0x5b, 0xc8, 0x70, 0xbd, 0x14, 0x86, 0xbb, 0x28, 0xaf,
	0x3c, 0x41, 0x4e, 0x00, 0x04, 0x0d, 0xd8, 0x29, 0x94, 0xe7, 0x0d, 0xcf, 0x13, 0xfb, 0xfc, 0x69,
	0xd9, 0xff, 0xea, 0xb7, 0x7b, 0x9e, 0x78, 0x0d, 0x20, 0xea, 0x1a, 0xe2, 0xe6, 0x54, 0xfa, 0x67,
	0x08, 0xf0, 0x10, 0x3d, 0xfc, 0xdb, 0x0d, 0xe9, 0x27, 0xc3, 0x21, 0x48, 0x12, 0xb0, 0x90, 0x29,
	0xd2, 0xff, 0xa8, 0x20, 0x2e, 0x2f, 0x98, 0x2e, 0xd5, 0x0b, 0x6a, 0x8f, 0xf6, 0x22, 0xb5, 0x53,
	0x7b, 0x4b, 0x83, 0x04, 0xdc, 0x07, 0xe2, 0xbc, 0xe7, 0x86, 0x21, 0xd9, 0xd7, 0x1c, 0x0d, 0x4d,
	0x81, 0x63, 0x54, 0xf5, 0x78, 0x18, 0xf2, 0x88, 0x8c, 0x94, 0x12, 0xc4, 0x50, 0x78, 0x3c, 0x20,
	0x5c, 0xe8, 0xf2, 0xb8, 0xbc, 0x68, 0x5a, 0xd4, 0xae, 0x31, 0xd2, 0x56, 0x4a, 0x74, 0x33, 0x68,
	0x27, 0x45, 0xba, 0xab, 0x29, 0xef, 0x25, 0xa9, 0xca, 0x77, 0x0b, 0xe5, 0xce, 0x7b, 0xc7, 0x8f,
	0x50, 0x69, 0x7a, 0x76, 0x5a, 0x43, 0x1f, 0xe2, 0x6c, 0x7a, 0xc5, 0x69, 0xbc, 0x6b, 0xc2, 0xf8,
	0x25, 0x2a, 0xcc, 0x4a, 0xf5, 0xd8, 0x6e, 0x3a, 0xb3, 0xfc, 0x14, 0xa6, 0xa7, 0x86, 0x0f, 0x10,
	0x9e, 0xf1, 0xb0, 0x48, 0x81, 0x3c, 0xa5, 0x41, 0x36, 0xb7, 0x6b, 0xb9, 0x96, 0xa7, 0xd0, 0xbd,
	0x0c, 0x59, 0xf9, 0x36, 0x8f, 0x56, 0x2e, 0xf1, 0x8a, 0x1b, 0x28, 0xc7, 0x06, 0x01, 0x4c, 0x37,
	0xcc, 0xba, 0x59, 0x87, 0x25, 0x0d, 0x9a, 0xac, 0xd7, 0x63, 0xb4, 0xac, 0xf7, 0x7c, 0x04, 0x74,
	0x00, 0x32, 0x26, 0x1e, 0x4f, 0xa2, 0x74, 0x55, 0xf3, 0x6e, 0x31, 0xa4, 0xe3, 0x76, 0x1a, 0x6f,
	0xea, 0x30, 0xee, 0xa0, 0x15, 0x5d, 0x1b, 0x2b, 0x09, 0x34, 0x24, 0x93, 0x9b, 0x77, 0x63, 0x63,
	0x21, 0x1d, 0x1f, 0x1a, 0xe8, 0x24, 0x81, 0x3f, 0x59, 0x68, 0x7d, 0xd2, 0xf9, 0x8c, 0xa9, 0x11,
	0x49, 0x22, 0xfd, 0xed, 0x71, 0x09, 0x31, 0xa1, 0xe9, 0x4d, 0xd3, 0x8b, 0x58, 0xa8, 0x75, 0x6e,
	0xbf, 0x25, 0x76, 0xa6, 0xfd, 0x98, 0xa9, 0xd1, 0xd1, 0x8c, 0xb7, 0x6e, 0x60, 0x6e, 0x75, 0x74,
	0x45, 0x76, 0xf3, 0x00, 0x55, 0xaf, 0x42, 0xe3, 0xbb, 0x68, 0xb1, 0xbe, 0xbf, 0xdf, 0x39, 0x2e,
	0xfd, 0x87, 0x31, 0x2a, 0xb8, 0xad, 0x57, 0xad, 0x66, 0x8f, 0xb8, 0xad, 0x37, 0x47, 0xad, 0xc3,
	0x5e, 0xc9, 0xc2, 0x45, 0xb4, 0xb4, 0xeb, 0x76, 0xba, 0xa4, 0xdd, 0xaa, 0xef, 0xb6, 0xdc, 0xd2,
	0x5c, 0xe3, 0xc5, 0xd7, 0xdf, 0x0b, 0xd6, 0x97, 0x5f, 0x6b, 0xd6, 0xbb, 0x67, 0xb7, 0x78, 0x28,
	0xc5, 0x89, 0x9f, 0x3d, 0x96, 0xfd, 0xff, 0xcd, 0xa9, 0xee, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x3a, 0xaf, 0x61, 0x68, 0x05, 0x00, 0x00,
}

func (this *ConnectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionConfig)
	if !ok {
		that2, ok := that.(ConnectionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestsPerConnection != that1.MaxRequestsPerConnection {
		return false
	}
	if this.ConnectTimeout != nil && that1.ConnectTimeout != nil {
		if *this.ConnectTimeout != *that1.ConnectTimeout {
			return false
		}
	} else if this.ConnectTimeout != nil {
		return false
	} else if that1.ConnectTimeout != nil {
		return false
	}
	if !this.TcpKeepalive.Equal(that1.TcpKeepalive) {
		return false
	}
	if !this.PerConnectionBufferLimitBytes.Equal(that1.PerConnectionBufferLimitBytes) {
		return false
	}
	if !this.CommonHttpProtocolOptions.Equal(that1.CommonHttpProtocolOptions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConnectionConfig_TcpKeepAlive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionConfig_TcpKeepAlive)
	if !ok {
		that2, ok := that.(ConnectionConfig_TcpKeepAlive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeepaliveProbes != that1.KeepaliveProbes {
		return false
	}
	if this.KeepaliveTime != nil && that1.KeepaliveTime != nil {
		if *this.KeepaliveTime != *that1.KeepaliveTime {
			return false
		}
	} else if this.KeepaliveTime != nil {
		return false
	} else if that1.KeepaliveTime != nil {
		return false
	}
	if this.KeepaliveInterval != nil && that1.KeepaliveInterval != nil {
		if *this.KeepaliveInterval != *that1.KeepaliveInterval {
			return false
		}
	} else if this.KeepaliveInterval != nil {
		return false
	} else if that1.KeepaliveInterval != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConnectionConfig_HttpProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionConfig_HttpProtocolOptions)
	if !ok {
		that2, ok := that.(ConnectionConfig_HttpProtocolOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdleTimeout != nil && that1.IdleTimeout != nil {
		if *this.IdleTimeout != *that1.IdleTimeout {
			return false
		}
	} else if this.IdleTimeout != nil {
		return false
	} else if that1.IdleTimeout != nil {
		return false
	}
	if this.MaxHeadersCount != that1.MaxHeadersCount {
		return false
	}
	if this.MaxStreamDuration != nil && that1.MaxStreamDuration != nil {
		if *this.MaxStreamDuration != *that1.MaxStreamDuration {
			return false
		}
	} else if this.MaxStreamDuration != nil {
		return false
	} else if that1.MaxStreamDuration != nil {
		return false
	}
	if this.HeadersWithUnderscoresAction != that1.HeadersWithUnderscoresAction {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
