// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"os"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewGateway(namespace, name string) *Gateway {
	gateway := &Gateway{}
	gateway.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return gateway
}

func (r *Gateway) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

func (r *Gateway) SetStatus(status *core.Status) {
	r.UpsertReporterStatus(status)
}

func (r *Gateway) SetReporterStatus(status *core.ReporterStatus) {
	r.StatusOneof = &Gateway_ReporterStatus{ReporterStatus: status}
}

// UpsertReporterStatus inserts the specified status into the ReporterStatus.Statuses map for the
// current namespace (as specified by POD_NAMESPACE env var).  If the resource does not yet have
// a ReporterStatus, one will be created.
// Note: POD_NAMESPACE environment variable must be set for this function to behave as expected.
func (r *Gateway) UpsertReporterStatus(status *core.Status) {
	podNamespace := os.Getenv("POD_NAMESPACE")
	if podNamespace != "" {
		if r.GetReporterStatus() == nil {
			r.SetReporterStatus(&core.ReporterStatus{})
		}
		if r.GetReporterStatus().Statuses == nil {
			r.GetReporterStatus().Statuses = make(map[string]*core.Status)
		}
		r.GetReporterStatus().Statuses[podNamespace] = status
	}
}

// GetNamespacedStatus returns the status stored in the ReporterStatus.Statuses map for the
// controller specified by the POD_NAMESPACE env var, or nil if no status exists for that
// controller.
// Note: POD_NAMESPACE environment variable must be set for this function to behave as expected.
func (r *Gateway) GetNamespacedStatus() *core.Status {
	podNamespace := os.Getenv("POD_NAMESPACE")
	if podNamespace != "" {
		if r.GetReporterStatus() == nil {
			return nil
		}
		if r.GetReporterStatus().Statuses == nil {
			return nil
		}
		return r.GetReporterStatus().Statuses[podNamespace]
	}
	return nil
}

func (r *Gateway) HasReporterStatus() bool {
	switch r.StatusOneof.(type) {
	case *Gateway_ReporterStatus:
		return true
	default:
		return false
	}
}

func (r *Gateway) HasStatus() bool {
	switch r.StatusOneof.(type) {
	case *Gateway_Status:
		return true
	default:
		return false
	}
}

func (r *Gateway) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *Gateway) GroupVersionKind() schema.GroupVersionKind {
	return GatewayGVK
}

type GatewayList []*Gateway

func (list GatewayList) Find(namespace, name string) (*Gateway, error) {
	for _, gateway := range list {
		if gateway.GetMetadata().Name == name && gateway.GetMetadata().Namespace == namespace {
			return gateway, nil
		}
	}
	return nil, errors.Errorf("list did not find gateway %v.%v", namespace, name)
}

func (list GatewayList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, gateway := range list {
		ress = append(ress, gateway)
	}
	return ress
}

func (list GatewayList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, gateway := range list {
		ress = append(ress, gateway)
	}
	return ress
}

func (list GatewayList) Names() []string {
	var names []string
	for _, gateway := range list {
		names = append(names, gateway.GetMetadata().Name)
	}
	return names
}

func (list GatewayList) NamespacesDotNames() []string {
	var names []string
	for _, gateway := range list {
		names = append(names, gateway.GetMetadata().Namespace+"."+gateway.GetMetadata().Name)
	}
	return names
}

func (list GatewayList) Sort() GatewayList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list GatewayList) Clone() GatewayList {
	var gatewayList GatewayList
	for _, gateway := range list {
		gatewayList = append(gatewayList, resources.Clone(gateway).(*Gateway))
	}
	return gatewayList
}

func (list GatewayList) Each(f func(element *Gateway)) {
	for _, gateway := range list {
		f(gateway)
	}
}

func (list GatewayList) EachResource(f func(element resources.Resource)) {
	for _, gateway := range list {
		f(gateway)
	}
}

func (list GatewayList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Gateway) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for Gateway

func (o *Gateway) GetObjectKind() schema.ObjectKind {
	t := GatewayCrd.TypeMeta()
	return &t
}

func (o *Gateway) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*Gateway)
}

func (o *Gateway) DeepCopyInto(out *Gateway) {
	clone := resources.Clone(o).(*Gateway)
	*out = *clone
}

var (
	GatewayCrd = crd.NewCrd(
		"gateways",
		GatewayGVK.Group,
		GatewayGVK.Version,
		GatewayGVK.Kind,
		"gw",
		false,
		&Gateway{})
)

var (
	GatewayGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "gateway.solo.io",
		Kind:    "Gateway",
	}
)
