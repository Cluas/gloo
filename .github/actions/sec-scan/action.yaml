name: 'Run Security Scan'
description: 'Runs security scan on specified version'
inputs:
  gloo-version:
    description: 'version of gloo to scan'
    required: true
  image-type:
    description: 'image to scan'
    required: true
env:
  SCAN_DIR: _output/scans
  IMAGE_REPO: quay.io/solo-io
runs:
  steps:
    - name: Cancel Previous Actions
      uses: styfle/cancel-workflow-action@0.4.1
      with:
        access_token: ${{ github.token }}
    - name: Free disk space
      run: |
        echo "Before clearing disk space:"
        df -h

        # https://github.com/actions/virtual-environments/issues/709
        sudo apt-get clean

        # Clean up pre-installed tools
        # https://github.com/actions/virtual-environments/issues/1918
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf $AGENT_TOOLSDIRECTORY

        echo "After clearing disk space:"
        df -h
    - name: Set up Go 1.16.3
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.3
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ inputs.gloo-version }}
    - name: Setup - gcloud / gsutil
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GLOO_VULN_REPORTER }}
        project_id: solo-public
        export_default_credentials: true
    - name: Check if scan exists
      id: check-scan-exists
      # set EXISTS as an output of this step
      # EXISTS=1 if scan doesn't exist
      run: |
        VERSION=$(git describe --tags --abbrev=0 | cut -c 2-)
        echo "::set-output name=VERSION::$(echo $VERSION)"
        EXISTS=$(gsutil -q stat gs://solo-gloo-security-scans/gloo/$(echo $VERSION)/${{ inputs.image-type }}_cve_report.docgen; echo $?)
        echo "::set-output name=EXISTS::$(echo $EXISTS)"
    - name: Build an image from Dockerfile
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      id: build-docker-image
      run: |
        go env -w GOPRIVATE=github.com/solo-io
        go mod tidy
        TAGGED_VERSION=v${{ steps.check-scan-exists.outputs.VERSION }} LOCAL_BUILD=true make ${{ inputs.image-type }}-docker
    - name: Setup Gloo Docs Output
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      run: |
        mkdir -p ${{ env.SCAN_DIR }}/${{ steps.check-scan-exists.outputs.VERSION }}
    - name: Gloo Docs
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REPO }}/${{ inputs.image-type }}:${{ steps.check-scan-exists.outputs.VERSION }}
        format: 'template'
        template: '@hack/utils/security_scan_report/markdown.tpl'
        output: ${{ env.SCAN_DIR }}/${{ steps.check-scan-exists.outputs.VERSION }}/${{ inputs.image-type }}_cve_report.docgen
        severity: 'CRITICAL,HIGH'
    - name: Publish Docs
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      env:
        TAGGED_VERSION: v${{ steps.check-scan-exists.outputs.VERSION }}
        SCAN_FILE: ${{ inputs.image-type }}_cve_report.docgen
      run: |
        make publish-security-scan
    - name: Run Trivy vulnerability scanner
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REPO }}/${{ inputs.image-type }}:${{ steps.check-scan-exists.outputs.VERSION }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: trivy-results-${{ inputs.image-type }}.sarif
        severity: 'CRITICAL,HIGH'
    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ steps.check-scan-exists.outputs.EXISTS == 1 }}
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: trivy-results-${{ inputs.image-type }}.sarif